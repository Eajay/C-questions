Partition problem is to determine whether a given set can be partitioned into two subsets such that the sum of elements in 
both subsets is same.

Examples:

arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.

***
   like 0-1 knapsack problem, but it is exact value rather than maximum value
   Notation:
   part[i][j] = true if a subset of {arr[0], arr[1], ..arr[i-1]}
   has sum equal to j, otherwise false
   
   Recursion relation:
   if(part[i-1][j] == true) part[i][j] = true;
   else if(j >= arr[i-1]) part[i][j] = part[i-1][j-arr[i-1]]; // part[i][j] means considering element arr[i-1]
   
   Base case:
   part[0:n][0] = true; // we could choose none of them
   part[0][1:sum/2] = false; // do not have subset
   * part[0][0] is true
   
   
   O(sum*n)
