Given a 2D array, find the maximum sum subarray in it. For example, in the following 2D array, 
the maximum sum subarray is highlighted with blue rectangle and sum of this subarray is 29.
{{1, 2, -1, -4, -20},
 {-8, -3, 4, 2, 1},
 {3, 8, 10, 1, 3},
 {-4, -1, 1, 7, -6}
};

result:
(Top, Left) ( 1, 1)
(Bottom, Right) ( 3, 3)
Max sum is: 29



***
1. decide left and right edge
2. temp[] means the sum of row numbers such that numbers locate between left and right edge
3. Using Maximum value Contiguous Subsequence (MVCS) to temp[] to decide up and down edge
4. if MVCS > maxSum, update final edge.
***

O(n^3)
